#!/usr/bin/env bash

function handle_internal_command() {
  local internal_path="$1"
  if [[ "$internal_path" == "update" ]];then
    echo "update docker images and containers"
    docker_update_all_containers

  elif [[ "$internal_path" == "remove" ]];then
    echo "remove all containers"
    docker_container_id="$(docker ps --all --filter label="dds" --format "{{.ID}}" || true)"
    echo "found docker_container_ids:${docker_container_id}"
    for container_id in $docker_container_id; do
      echo "remove container: ${container_id}"
      docker rm --force ${container_id}
    done

  elif [[ "$internal_path" == "list_updated_repos" ]];then
    echo "list updated docker repositories"
    max_time_diff=${query_time:-"120"}

    remote_dockers="$(curl --silent \
        "https://hub.docker.com/v2/repositories/nasoym/?page=1&page_size=10000" \
      | jq -c '.results|map({name,last_updated})[]' \
      | jq -c '.last_updated=(.last_updated|gsub("\\.[0-9]*Z$";"")|strptime("%Y-%m-%dT%H:%M:%S")|mktime)'
    )"

    local_dockers="$(docker images --format "{{.Repository}}:{{.Tag}} {{.CreatedAt}}" nasoym/*\
      | sort  \
      | sed \
        -e 's/ CET$//g' \
        -e 's/ CEST$//g' \
        -e 's/ UTC$//g' \
        -e 's/^\([^ ]*\) \(.*\)$/echo "\1 $(date -d "\2" +%s)"/ge' \
      | awk '{a[$1]=$2} END { for(i in a){ print i, a[i]} }' \
      | sort \
      | awk -F ' |:' '{a[$1]=$3} END {for(i in a){print i,a[i]}}' \
      | jq -c -R '.|split(" ")|{name:.[0]|gsub("^nasoym\/";""),last_updated:.[1]|tonumber,type:"local"}'
    )"

    echo -en "${remote_dockers}\n${local_dockers}" \
      | jq -s 'group_by(.name)' \
      | jq -c 'map({name:.[0].name,local:(.[]|select(.type=="local").last_updated),remote:(.[]|select(has("type")|not).last_updated)})' \
      | jq -c 'map(.diff=(.remote-.local))' \
      | jq -c "map(select(.diff > ${max_time_diff}))" \
      | jq -r '.[]'
    #   | jq -r 'map(.name)[]'

  elif [[ "$internal_path" == "active_containers" ]];then
    echo "active containers"
    active_minutes=${query_minutes:-"30"}
    awk -v active=${active_minutes} '{t=(systime()-60*active)*1000; if ($2>t && $4=="docker_request:") {a[$5]=$5}} END {for (i in a){print i}}' ${LOG_FILE}

  elif [[ "$internal_path" == "inactive_containers" ]];then
    echo "inactive containers"
    active_minutes=${query_minutes:-"30"}
    active_containers="$(awk -v active=${active_minutes} '{t=(systime()-60*active)*1000; if ($2>t && $4=="docker_request:") {a[$5]=$5}} END {for (i in a){print i}}' ${LOG_FILE})"
    all_containers="$(docker ps --all --filter label="dds" --format "{{.ID}}" || true)"
    diff \
      --unchanged-line-format= \
      --old-line-format='%L' \
      --new-line-format= \
      <(sort <<<"$all_containers") <(sort <<<"$active_containers")

  elif [[ "$internal_path" == "clear_inactive" ]];then
    echo "clear inactive containers"
    active_minutes=${query_minutes:-"30"}
    active_containers="$(awk -v active=${active_minutes} '{t=(systime()-60*active)*1000; if ($2>t && $4=="docker_request:") {a[$5]=$5}} END {for (i in a){print i}}' ${LOG_FILE})"
    all_containers="$(docker ps --all --filter label="dds" --format "{{.ID}}" || true)"
    inactive_containers="$(diff \
      --unchanged-line-format= \
      --old-line-format='%L' \
      --new-line-format= \
      <(sort <<<"$all_containers") <(sort <<<"$active_containers")
    )"
    for c in $inactive_containers; do
      public_ports="$(docker port "$c" | awk -F ':' '{print $NF}')"
      connections="$(for port in $public_ports; do lsof -n -iTCP@127.0.0.1:${port} -sTCP:ESTABLISHED; done)"
      if [[ -z "$connections" ]]; then
        echo "remove inactive container: $c"
        docker rm --force ${c}
      fi
    done

  elif [[ "$internal_path" == "docker_ps" ]];then
    docker ps --all

  elif [[ "$internal_path" == "info" ]];then
    echo "info"

  elif [[ "$internal_path" == "pull" ]];then
    echo "run git pull"
    git pull

  elif [[ "$internal_path" == "env" ]];then
    env

  elif [[ "$internal_path" == "clearlogs" ]];then
    echo "clear logfile"
    > ${LOG_FILE}

  elif [[ "$internal_path" == "logs" ]];then
    echo "logs"
    log_lines=${query_lines:-"50"}
    if [[ -r ${LOG_FILE} ]]; then
      tail -n${log_lines} ${LOG_FILE}
    fi
  fi
}

