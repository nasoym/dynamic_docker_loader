#!/usr/bin/env bash

function handle_internal_command() {
  local internal_path="$1"
  if [[ "$internal_path" == "update" ]];then
    echo "update docker images and containers"
    docker_update_all_containers

  elif [[ "$internal_path" == "remove" ]];then
    echo "remove all containers"
    docker_container_id="$(docker ps --all --filter label="dds" --format "{{.ID}}" || true)"
    echo "found docker_container_ids:${docker_container_id}"
    for container_id in $docker_container_id; do
      echo "remove container: ${container_id}"
      docker rm --force ${container_id}
    done

  elif [[ "$internal_path" == "clearold" ]];then
    echo "remove old containers"
    # sudo lsof -n -iTCP@127.0.0.1:32836 -sTCP:ESTABLISHED

  elif [[ "$internal_path" == "active_containers" ]];then
    echo "active containers"
    active_minutes=${query_minutes:-"30"}
    awk -v active=${active_minutes} '{t=(systime()-60*active)*1000; if ($2>t && $4=="docker_request:") {a[$5]=$5}} END {for (i in a){print i}}' ${LOG_FILE}

  elif [[ "$internal_path" == "inactive_containers" ]];then
    echo "inactive containers"
    active_minutes=${query_minutes:-"30"}
    active_containers="$(awk -v active=${active_minutes} '{t=(systime()-60*active)*1000; if ($2>t && $4=="docker_request:") {a[$5]=$5}} END {for (i in a){print i}}' ${LOG_FILE})"
    all_containers="$(docker ps --all --filter label="dds" --format "{{.ID}}" || true)"
    diff \
      --unchanged-line-format= \
      --old-line-format='%L' \
      --new-line-format= \
      <(sort <<<"$all_containers") <(sort <<<"$active_containers")

  elif [[ "$internal_path" == "docker_ps" ]];then
    docker ps --all

  elif [[ "$internal_path" == "info" ]];then
    echo "info"

  elif [[ "$internal_path" == "pull" ]];then
    echo "run git pull"
    git pull

  elif [[ "$internal_path" == "env" ]];then
    env

  elif [[ "$internal_path" == "clearlogs" ]];then
    echo "clear logfile"
    > ${LOG_FILE}

  elif [[ "$internal_path" == "logs" ]];then
    echo "logs"
    log_lines=${query_lines:-"50"}
    if [[ -r ${LOG_FILE} ]]; then
      tail -n${log_lines} ${LOG_FILE}
    fi
  fi
}

