#!/usr/bin/env bash

function docker_handle_request() {
  local docker_image_id docker_ports public_port docker_image_created response
  docker_repository="$1"
  docker_version="$2"
  docker_port="$3"
  request="$(cat)"

  docker_id="$(docker ps --latest --filter status=running --filter label="dds" --filter label="${DOCKER_NAMESPACE}/${docker_repository}:${docker_version}" --format "{{.ID}}" || true)"
  if [[ -z "$docker_id" ]];then
    log "launch docker container: ${docker_repository}"
    docker run --detach --publish-all --label="dds" --label "${DOCKER_NAMESPACE}/${docker_repository}:${docker_version}" ${DOCKER_NAMESPACE}/${docker_repository}:${docker_version} >&2 >/dev/null || true
  else
    log "found running docker image: $docker_id"
  fi
  docker_ports="$(docker ps --latest --filter status=running --filter label="dds" --filter label="${DOCKER_NAMESPACE}/${docker_repository}:${docker_version}" --format "{{.Ports}}" || true)"

  if [[ -n "$docker_ports" ]];then
    log "found public docker ports:${docker_ports}"
    if [[ "$docker_port" == "-" ]];then
      public_port="$(awk "BEGIN{RS=\",|\n\";FS=\"->|:\"}{print \$2;exit}" <<<"$docker_ports")"
    else
      public_port="$(awk "BEGIN{RS=\",|\n\";FS=\"->|:\"}{if (\$3==\"${docker_port}/tcp\"){print \$2}}" <<<"$docker_ports")"
    fi
    log "use public port:${public_port}"

    if [[ -n "$public_port" ]];then
      docker_image_created="$(docker inspect ${DOCKER_NAMESPACE}/${docker_repository}:${docker_version} | jq -r '.[0].Created' || true)"

      for i in {1..50}; do 
        log "execute request: localhost:${public_port}${docker_request_uri}"
        response="$( \
          echo -e "${request}\n" | socat - TCP:localhost:${public_port},shut-none,recvtimeo=10 \
        )"
        if [[ -n "$response" ]];then
          break
        fi
        log "response was empty retry in 0.1 seconds"
        sleep 0.2
      done
      log "response from container: $(sed -n '1p' <<<"$response")"
      sed -n '1p' <<<"${response}"
      echo "Docker_Image_Created: ${docker_image_created}"
      echo "Docker_Image_Name: ${docker_id}"
      echo "Custon_Header: injected"
      sed -n '2,$p' <<<"${response}"
      exit 0
    else
      log "no public port found"
    fi
  else
    log "no docker ports found"
  fi
}

