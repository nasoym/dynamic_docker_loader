#!/usr/bin/env bash

function main() {
  parse_request
  read \
    internal_path \
    docker_port \
    docker_version \
    docker_repository \
    docker_request_uri \
    < <(extract_docker_information_from_path "$request_uri")

  log "${SOCAT_PEERADDR}:${SOCAT_PEERPORT} ${request_method} ${request_uri}"

  if [[ "$no_auth" -ne 1 ]];then
    authorization="$(sed -e '/^authorization/I!d' -e 's/^authorization: \(.*\)$/\1/gi' <<<"$request_header_lines")"
    authorization_type="${authorization%% *}"
    authorization_token="${authorization#* }"
    shopt -s nocasematch
    if [[ ! "$authorization_type" =~ ^jwt$ ]];then
      log "no jwt authorization found"
      echo_response_status_line 401 "Unauthorized"
      exit
    fi
    if ! ./lib/jwt_verify -f public_jwt_keys >/dev/null <<<"$authorization_token"; then
      log "jwt signature failed"
      echo_response_status_line 401 "Unauthorized"
      exit
    fi
  fi

  if [[ "$internal_path" != "-" ]];then
    log "handle internal_path:${internal_path}"
    echo_response_status_line 200 "Ok"
    echo
    handle_internal_command $internal_path
    exit 0
  elif [[ -n "$docker_repository" ]];then
    response="$( 
    echo -e "${request_method} ${docker_request_uri} ${request_http_version}\n${request_header_lines}${request_content}" \
      | docker_handle_request "$docker_repository" "$docker_version" "$docker_port" )"
    docker_return_code="$?"

    log "docker response: $( sed -n 1p <<<"$response")"
    log "docker return code: $docker_return_code"
    if [[ -n "$response" ]];then
      echo "$response"
      exit 0
    fi
    #TODO handle failure of container
  else
    echo_response_status_line 404 "Not Found"
  fi
}

if [[ ${BASH_SOURCE[0]} != $0 ]]; then
  export -f main
else
  main "${@}"
  exit $?
fi

