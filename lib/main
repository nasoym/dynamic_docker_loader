#!/usr/bin/env bash

function main() {
  parse_request

  read \
    internal_path \
    docker_port \
    docker_version \
    docker_repository \
    docker_request_uri \
    < <(extract_docker_information_from_path "$request_uri")

  if [[ "${request_uri}" =~ \? ]]; then
    request_queries="${request_uri#*\?}"
    for I in $(tr '&' '\n' <<<"$request_queries"); do
      query_key=${I//\=*/}
      [[ "${I}" =~ = ]] && query_value="$(urldecode ${I//*\=/})"
      declare -x "query_${query_key}"="$query_value"
    done
  fi

  log "${SOCAT_PEERADDR}:${SOCAT_PEERPORT} ${request_method} ${request_uri}"

  authorization="$(get_header_value "authorization" <<<"$request_header_lines")"
  [[ "$no_auth" -ne 1 ]] && { authorization_verify "$authorization"; }

  if [[ "$internal_path" != "-" ]];then
    log "handle internal_path:${internal_path}"
    echo_response_status_line 200 "Ok"
    echo
    handle_internal_command $internal_path
    exit 0
  elif [[ -n "$docker_repository" ]];then
    response="$( 
    echo -e "${request_method} ${docker_request_uri} ${request_http_version}\n${request_header_lines}${request_content}" \
      | docker_handle_request "$docker_repository" "$docker_version" "$docker_port" )"
    docker_return_code="$?"

    log "docker return code: $docker_return_code"
    log "docker response: $( sed -n 1p <<<"$response")"
    if [[ -n "$response" ]];then
      echo "$response"
      exit 0
    fi
    #TODO handle failure of container
  else
    echo_response_status_line 404 "Not Found"
  fi
}

